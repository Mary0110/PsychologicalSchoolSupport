version: '3.9'

services:
  sqlserver:
    container_name: Sqlserver
    image: mcr.microsoft.com/mssql/server:latest
    ports:
      - "11433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=paSSword0110
    networks:
      - edu
      - authorization
      - meet-report
    volumes:
      - sql-data:/var/opt/mssql
    restart: unless-stopped
  
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mary0110
      MONGO_INITDB_ROOT_PASSWORD: paSSword0110
    networks:
      - messaging
    volumes:
      - mongo-data:/data/db
    
  rabbitmq:
    container_name: Rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    hostname: "rabbitmq"
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmquser
      - RABBITMQ_DEFAULT_PASS=rabbitmqPassword12!
    volumes:
      - rabbitmq:/var/lib/rabbitmq/mnesia
    networks:
      - meet-report
    restart: unless-stopped
    
  elasticsearch:
    container_name: elk
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    ports:
      - "9201:9200"
    volumes: 
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node 
    networks:
      - edu
  
  minio:
    image: docker.io/bitnami/minio:2022
    container_name: minio_server
    restart: always
    ports:
      - "9002:9000"
      - '9003:9001'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - 'minio-data:/data'
    networks:
      - meet-report
  
  kibana:
    container_name: Kibana
    image: docker.elastic.co/kibana/kibana:8.11.3
    ports:
      - "5602:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - edu
    
  redis:
    image: redis:latest
    ports:
      - "6378:6379"
    restart: unless-stopped
    volumes:
      - redis-data:/data/redis
    networks:
      - edu
  
  PsychologicalSupportPlatform.Authorization.API:
    container_name: Authorization
    image: ${DOCKER_REGISTRY-}authorization:v3.9
    build:
      context: ./Services
      dockerfile: Dockerfile
    depends_on:
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Server=sqlserver;Trusted_Connection=false;TrustServerCertificate=True;MultiSubnetFailover=True; Database=authDb; User ID='sa'; Password='paSSword0110';Integrated security=False;
      - ASPNETCORE_URLS=http://+:5131
    networks:
      - meet-report
      - edu
    ports:
      - "5131:5131"
      - "5001:5001"
    restart: unless-stopped
    
  PsychologicalSupportPlatform.Edu.API:
    container_name: Edu
    image: ${DOCKER_REGISTRY-}edu:v4
    build:
      context: ./Services
      dockerfile: Dockerfileedu
    depends_on:
      - sqlserver
      - redis
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Server=sqlserver;Trusted_Connection=false;TrustServerCertificate=True;MultiSubnetFailover=True; Database=eduDb; User ID='sa'; Password='paSSword0110';Integrated security=False;
      - CONNECTIONSTRINGS__REDIS=redis:6379
      - ElasticSearchConfig__Url=http://elasticsearch:9200
      - GrpcConfig__Url=http://PsychologicalSupportPlatform.Authorization.API:5001
      - Minio__Endpoint=minio:9000
    networks:
      - edu
    ports:
      - "5285:80"
    restart: unless-stopped
        
  PsychologicalSupportPlatform.Meet.API:
    container_name: Meet
    image: ${DOCKER_REGISTRY-}meet:v3.8
    build:
      context: ./Services
      dockerfile: Dockerfile_meet
    depends_on:
      - rabbitmq
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Server=sqlserver;Trusted_Connection=false;TrustServerCertificate=True;MultiSubnetFailover=True; Database=meetDb; User ID='sa'; Password='paSSword0110';Integrated security=False;
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
    networks:
      - meet-report
    ports:
      - "5299:80"
    restart: unless-stopped
    
  PsychologicalSupportPlatform.Messaging.API:
    container_name: Messaging
    image: ${DOCKER_REGISTRY-}messaging:v3.8
    build:
      context: ./Services
      dockerfile: Dockerfile_messaging
    depends_on:
      - mongo
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - GrpcConfig__UsersUrl=http://PsychologicalSupportPlatform.Authorization.API:5001
    networks:
      - messaging
    ports:
      - "5229:80"
    restart: unless-stopped
    
  PsychologicalSupportPlatform.Report.API:
    container_name: Report
    image: ${DOCKER_REGISTRY-}report:v3.8
    build:
      context: ./Services
      dockerfile: Dockerfile_report
    depends_on:
      - rabbitmq
      - minio
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTIONSTRINGS__DEFAULTCONNECTION=Server=sqlserver;Trusted_Connection=false;TrustServerCertificate=True;MultiSubnetFailover=True; Database=reportDb; User ID='sa'; Password='paSSword0110';Integrated security=False;
      - CONNECTIONSTRINGS__HANGFIRECONNECTION=Server=sqlserver;Trusted_Connection=false;TrustServerCertificate=True;MultiSubnetFailover=True; Database=hangfireDb; User ID='sa'; Password='paSSword0110';Integrated security=False;
      - GrpcConfig__UsersUrl=http://PsychologicalSupportPlatform.Authorization.API:5001
      - RabbitMQConfig__HostName=rabbitmq
      - MessageQueueSettings__Host=rabbitmq
      - MessageQueueSettings__UserName=rabbitmquser
      - MessageQueueSettings__Password=rabbitmqPassword12!
      - Minio__Endpoint=minio:9000
    networks:
      - meet-report
    ports:
      - "5218:80"
    restart: unless-stopped    
    
  gateway:
    container_name: OcelotGateway
    image: ${DOCKER_REGISTRY-}gateway:v3.9
    build:
      context: ./Gateways
      dockerfile: Dockerfile
    ports:
      - '8010:80'
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Ocelot__JsonPath=docker-ocelot.json
    depends_on:
      - PsychologicalSupportPlatform.Meet.API
      - PsychologicalSupportPlatform.Authorization.API
      - PsychologicalSupportPlatform.Edu.API
      - PsychologicalSupportPlatform.Report.API
      - PsychologicalSupportPlatform.Messaging.API
    networks:
      - edu
      - meet-report
      - messaging
      - authorization
    restart: unless-stopped

networks:
  edu:
  authorization:
  meet-report:
  messaging:
    
volumes:
  elasticsearch-data:
  redis-data:
  rabbitmq:
  sql-data:
  mongo-data:
  minio-data:
    